version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: /Dockerfile
    container_name: chatapp-backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: sh -c "npx prisma generate && npx prisma db push && npm run dev"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/chatapp
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=chatapp_service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:16
    container_name: chatapp_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck: # For depends_on condition
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.5
    container_name: chatapp_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.7.5
    container_name: chatapp_kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 10
  kafka-ui-s:
    image: kafbat/kafka-ui:f4c6692
    container_name: chatapp_ui_kafka
    ports:
      - "8080:8080"
    restart: always
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=wizard_test
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  redis:
    image: redis/redis-stack:latest
    container_name: chatapp_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
      - "8001:8001"
    restart: unless-stopped

  prisma_studio:
    build: ./backend
    container_name: prisma_studio
    env_file:
      - ./backend/.env
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/chatapp
    volumes:
      - ./backend/prisma:/app/prisma
    depends_on:
      db:
        condition: service_healthy
    command: npx prisma studio --port 5555 --browser none
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatapp-frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - ./frontend:/src
      - /src/node_modules
      - /src/.next
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    command: npm run dev
volumes:
  postgres_data:
  redis_data:
  local-redis-stack.conf:
