// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  AUDIO
  IMAGE
  VIDEO
  FILE
  SYSTEM // for system message like User joined the Group
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String?
  emailVerified Boolean  @default(false)
  image         String?
  bio           String?
  Status        status   @default(OFFLINE)
  lastseen      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdConversation Conversation[]             @relation("ConversationCreator")
  conversations       ConversationParticipants[]
  sentMessages        Message[]                  @relation("SentMessages")
  messageReactions    MessageReaction[]
  readReceipts        ReadReceipt[]
  sessions            Session[]
  accounts            Account[]

  @@index([email])
  @@index([name])
  @@map("users")
}

model Conversation {
  id            String    @id @default(uuid())
  name          String?
  isGroup       Boolean   @default(false)
  avatar        String?
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?

  creator      User?                      @relation("ConversationCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  participants ConversationParticipants[]
  messages     Message[]

  @@index([lastMessageAt])
  @@index([createdBy])
  @@map("conversations")
}

model ConversationParticipants {
  id             String          @id @default(uuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  isMuted        Boolean         @default(false)
  isArchived     Boolean         @default(false)
  isPinned       Boolean         @default(false)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  senderId       String
  content        String      @db.Text
  messageType    MessageType @default(TEXT)
  replyToId      String? // for threaded replies
  isEdited       Boolean     @default(false)
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  conversation Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User              @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo      Message?          @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies      Message[]         @relation("MessageReplies")
  attachments  Attachment[]
  reactions    MessageReaction[]
  readReceipts ReadReceipt[]

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([replyToId])
  @@map("messages")
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("attachments")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@map("message_reactions")
}

model ReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("read_receipts")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
